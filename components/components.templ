package components

import (
	"math"
	"strconv"
	"os"
	"log/slog"
	"fmt"
	"strings"

	"github.com/HannesOberreiter/gbif-extinct/pkg/queries"
	"github.com/HannesOberreiter/gbif-extinct/pkg/gbif"
	"github.com/HannesOberreiter/gbif-extinct/internal"

    "golang.org/x/text/message"
	"github.com/gomarkdown/markdown"
	"github.com/gomarkdown/markdown/html"
	"github.com/gomarkdown/markdown/parser")

var printer = message.NewPrinter(message.MatchLanguage("en"))

type Pages struct {
	CURRENT  int
	NEXT     int
	PREVIOUS int
	LAST     int
}

type PagesString struct {
	CURRENT  string
	NEXT     string
	PREVIOUS string
	LAST     string
}

func CalculatePages(counts queries.Counts, q queries.Query) PagesString {
	var response Pages
	response.CURRENT = 1

		page, err := strconv.Atoi(q.PAGE)
		if err == nil {
			response.CURRENT = page
		}
	

	response.LAST = int(math.Ceil(float64(counts.TaxaCount) / float64(queries.DefaultPageLimit)))
	if response.CURRENT == response.LAST {
		response.NEXT = response.LAST
		response.PREVIOUS = response.LAST - 1
	} else if response.CURRENT == 1 {
		response.NEXT = response.CURRENT + 1
		response.PREVIOUS = response.CURRENT
	} else {
		response.NEXT = response.CURRENT + 1
		response.PREVIOUS = response.CURRENT - 1
	}

	return PagesString{
		CURRENT:  strconv.Itoa(response.CURRENT),
		NEXT:     strconv.Itoa(response.NEXT),
		PREVIOUS: strconv.Itoa(response.PREVIOUS),
		LAST:     strconv.Itoa(response.LAST),
	}
}


type TableRows *queries.TableRows

var _aboutPage string;

func RenderAbout() {
	md, err := os.ReadFile("README.md")
	if err != nil {
		slog.Error("Error reading README.md", err)
		_aboutPage = "Error reading README.md"
	}

	extensions := parser.CommonExtensions | parser.AutoHeadingIDs | parser.NoEmptyLineBeforeBlock
	p := parser.NewWithExtensions(extensions)
	doc := p.Parse(md)

	htmlFlags := html.CommonFlags | html.HrefTargetBlank
	opts := html.RendererOptions{Flags: htmlFlags}
	renderer := html.NewRenderer(opts)
	res := markdown.Render(doc, renderer)
	_aboutPage = string(res)
	slog.Info("About page rendered")
}

func nbsp(input string) string {
    const nbsp = '\u00A0'
	return strings.ReplaceAll(input, " ", string(nbsp))
}

// Intercept helper function to call main.js setSortingFields to update the form and submit it
script setSortingFields(orderBy string, orderDir string) {
	window['setSortingFields'](orderBy, orderDir);
}

// Refresh filter simply by redirecting to the base URL
script baseUrl() {
	window.location = window.location.origin;
}


// Utility to create a table header with sorting
templ TableTh(columnName string, orderBy string, q queries.Query) {
	if q.ORDER_BY == orderBy {
		if q.ORDER_DIR == "asc" {
			<th class="text-left font-black cursor-pointer" onclick={ setSortingFields(orderBy, "desc") }>
				{ nbsp(columnName + " ↓") }
			</th>
		} else {
			<th class="text-left font-black cursor-pointer" onclick={ setSortingFields(orderBy, "asc") }>
				{ nbsp(columnName + " ↑") }
			</th>
		}
	} else {
		<th class="text-left cursor-pointer" onclick={ setSortingFields(orderBy, "desc") }>
			{ nbsp(columnName + " ↕") }
		</th>
	}
}

// Form containing our filters for the table
templ Filter(){
  	<form id="filterForm" class="w-full " hx-get="/table" hx-swap="outerHTML" hx-target="#tableContainer" hx-trigger="submit, filterSubmit from:body" hx-disabled-elt="#filterBtn" hx-indicator="#spinner">
	  	<div class="flex flex-wrap -mx-3 mb-2">
			<!-- Scientific Name -->
	    	<div class="w-full md:w-1/2 lg:w-1/4 px-3 mb-3 md:mb-0">
      			<label class="block uppercase tracking-wide text-gray-500 text-xs font-bold mb-2" for="species">
        			Species
      			</label>
      			<input class="block w-full py-1 mb-3" id="species" type="text" placeholder="Scientific name" name="search" />
    		</div>
			<!-- Country -->
	    	<div class="w-full md:w-1/2 lg:w-1/4 px-3 mb-3 md:mb-0">
      			<label class="block uppercase tracking-wide text-gray-500 text-xs font-bold mb-2" for="country">
        			Country
      			</label>
      			<input class="block w-full py-1 mb-3" id="country" type="text" placeholder="2-Letter ISO" name="country" />
    		</div>
			<!-- Select Rank -->
			<div class="w-full md:w-1/2 lg:w-1/4 px-3 mb-3 md:mb-0">
      			<label class="block uppercase tracking-wide text-gray-500 text-xs font-bold mb-2" for="rank">
        			Taxa Rank
      			</label>
      			<select class="block w-full py-1 mb-3" id="rank" name="rank">
					<option value="kingdom">Kingdom</option>
					<option value="phylum">Phylum</option>
					<option value="class">Class</option>
					<option value="order">Order</option>
					<option value="family">Family</option>
				</select>
    		</div>
			<!-- Filter based on rank, taxa -->
	    	<div class="w-full md:w-1/2 lg:w-1/4 px-3 mb-3 md:mb-0">
      			<label class="block uppercase tracking-wide text-gray-500 text-xs font-bold mb-2" for="taxa">
        			Taxa
      			</label>
      			<input class="block w-full py-1 mb-3" id="taxa" type="text" placeholder="Based on rank" name="taxa" />
    		</div>
			<!-- Checkbox if Synonym Taxa should be shown -->
			<div class="flex items-center w-full md:w-1/2 lg:w-1/4 px-3 mb-3 md:mb-0" >
			    <label class="uppercase tracking-wide text-gray-500 text-xs font-bold mb-2 mr-2" for="synonym">
			        Show Synonyms
			    </label>
				<input class="block py-1 mb-3 pl-1" id="synonym" type="checkbox" name="show_synonyms" value="true" onclick="document.getElementById('filterBtn').click();" />
			</div>

			<!-- Hidden fields for sorting -->
			<input hidden name="order_by" value="date"/>
			<input hidden name="order_dir" value="asc"/>
		</div>
		<div class="flex flex-row flex-wrap">
			<button id="filterBtn" class="uppercase tracking-wide hover:font-bold border px-1" type="submit">
    			Apply filter
			</button>
			<div id="spinner" class="htmx-indicator">
				<!-- Spinner from https://github.com/n3r4zzurr0/svg-spinners -->
				<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M10.14,1.16a11,11,0,0,0-9,8.92A1.59,1.59,0,0,0,2.46,12,1.52,1.52,0,0,0,4.11,10.7a8,8,0,0,1,6.66-6.61A1.42,1.42,0,0,0,12,2.69h0A1.57,1.57,0,0,0,10.14,1.16Z"><animateTransform attributeName="transform" type="rotate" dur="0.75s" values="0 12 12;360 12 12" repeatCount="indefinite"/></path></svg>
			</div>
			<button class="uppercase tracking-wide hover:font-bold border px-1" onclick={ baseUrl() }>
    			Clear
			</button>
			<button class="uppercase tracking-wide hover:font-bold border px-1 ml-1" id="downloadBtn">
				Download
			</button>
		</div>
	</form>
}

templ Pagination(pages PagesString){
	<div class="flex flex-row flex-wrap pb-5">
		<div>
			<button class="uppercase tracking-wide hover:font-bold pr-sm border px-1"  hx-get="/table" hx-swap="outerHTML" hx-target="#tableContainer" hx-include="#filterForm" hx-vals={ `{"page":1}` }>
				First
			</button>
		</div>
		|
		<div>
			<button class="uppercase tracking-wide hover:font-bold pr-sm border px-1"  hx-get="/table" hx-swap="outerHTML" hx-target="#tableContainer" hx-include="#filterForm" hx-vals={ `{"page":` + pages.PREVIOUS + `}` }  disabled?={ pages.CURRENT == pages.PREVIOUS }>
				Previous
			</button>
		</div>
		|
		<div>
			<button class="uppercase tracking-wide hover:font-bold pr-sm border px-1"  hx-get="/table" hx-swap="outerHTML" hx-target="#tableContainer" hx-include="#filterForm" hx-vals={ `{"page":` + pages.NEXT + `}` } disabled?={ pages.CURRENT == pages.LAST }>
				if pages.CURRENT == pages.LAST {
					Last
				} else {
					Next
				}
			</button>
		</div>
	</div>
}



templ Table(rows TableRows, q queries.Query, counts queries.Counts, pages PagesString) {
    <div id="tableContainer">
		<small>
			<span>Taxa: { printer.Sprintln(counts.TaxaCount) }</span>
			<span> | </span>
			<span>Observations: { printer.Sprintln(counts.ObservationCount) }</span>
		</small>
		<div class="mt-2">
        <table class="text-nowrap table-auto w-full m-0">
            <thead>
                <tr>
					@TableTh("Scientific Name", "name", q)
					<th class="text-left">Country</th>
					@TableTh("Latest Observation", "date", q)
					<th class="text-left">~Years</th>
					@TableTh("Last Fetched", "fetch", q)
					if q.SHOW_SYNONYMS {
						<th class="text-left">Synonym</th>
					}
					<th class="text-left">Taxa</th>
                </tr>
            </thead>
            <tbody>
			    for _, row := range rows.Rows {
                	<tr class="hover:bg-gray-200 border-0">
                        <td class="text-left">
							<a class="italic" href={ templ.URL("https://www.gbif.org/species/" + row.TaxonID)} target="_blank">
								{ nbsp(row.ScientificName.String) }
							</a>
						</td>
						<td class="text-left">
							{ row.CountryCodeClean } { row.CountryFlag }
						</td>
                        <td class="text-center"> 
							if row.ObservationDate.Valid && row.ObservationID.Valid {
								<a href={ templ.URL("https://www.gbif.org/occurrence/" + row.ObservationID.String)} target="_blank">{ row.ObservationDate.Time.Format("2006-01-02") }</a>
							} else {
								{ "n/a" }
							}
						</td>
						<td class="text-right">
							{ row.ObservedDiff }
						</td>
						<td class="text-center cursor-pointer" hx-get="/fetch" hx-vals={ `{"taxonID":"` + row.TaxonID + `"}` } hx-disable-elt="this" hx-indicator=".loading" hx-confirm="Try to fetch latest observation from GBIF? Warning this may take a while for taxa with lots of observations in different countries.">
							<span class="underline loading show">
							if row.LastFetch.Valid {
								{ row.LastFetch.Time.Format("2006-01-02") }
							} else {
								{ "not yet" }
							}
							</span>
							<span class="loading hide">
								Loading...
							</span>

						</td>
						if q.SHOW_SYNONYMS {
							<td>
								if row.IsSynonym && row.SynonymID.Valid && row.SynonymName.Valid {
									<a class="italic" href={ templ.URL("https://www.gbif.org/species/" + row.SynonymID.String)} target="_blank"> { nbsp(row.SynonymName.String) } </a>
								} else {
								{ "" }
								}
							</td>
						}
						<td class="text-left">
							{ nbsp(row.Taxa) }
						</td>
                	</tr>
				}
            </tbody>
        </table>
		</div>
		<!-- Pagination -->
		if pages.LAST != "1" {
			@Pagination(pages)
		}
    </div>
}

// Index landing page with table
templ PageTable(rows TableRows, q queries.Query, counts queries.Counts, pages PagesString, cacheBuster int64){
		@Page(cacheBuster) {
			<div>
    			<section>
					@Filter()
    			</section>
				<hr class="mt-1 mb-1" />
    			<main>
					@Table(rows, q, counts, pages)
    			</main>
			</div>
		}
}

// About page
templ PageAbout(countTaxa, countLastFetched int, cacheBuster int64){
	@Page(cacheBuster) {
		<div class="container">
			@templ.Raw(_aboutPage)
			
			<hr class="mt-1 mb-1" />
			<h3>Current Server Setup</h3>
			<ul>
				<li>Cron Interval: { fmt.Sprint(internal.Config.CronJobIntervalSec) } seconds</li>
				<li>Taxa per Cron: { gbif.SampleRows }</li>
				<li>User Agent Prefix: { internal.Config.UserAgentPrefix }</li>
				<li>Total Taxa in DB: { printer.Sprintln(countTaxa) }</li>
				<li>Fetched Taxa, past 12 months: { printer.Sprintln(countLastFetched) }</li>
			</ul>
		</div>

	}

}

// Main Page table wrapped around pages
templ Page(cacheBuster int64) {
	<html>
		<head>
			<meta charset="UTF-8"/>
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
			<title>GBIF - Latest Observation</title>
            <link href={fmt.Sprintf("/assets/css/main.css?=%d", cacheBuster)} rel="stylesheet" />
			<script src={fmt.Sprintf("/assets/js/htmx.min.js?=%d", cacheBuster)} />
			<link rel="apple-touch-icon-precomposed" sizes="57x57" href="/assets/icons/apple-touch-icon-57x57.png" />
			<link rel="apple-touch-icon-precomposed" sizes="114x114" href="/assets/icons/apple-touch-icon-114x114.png" />
			<link rel="apple-touch-icon-precomposed" sizes="72x72" href="/assets/icons/apple-touch-icon-72x72.png" />
			<link rel="apple-touch-icon-precomposed" sizes="144x144" href="/assets/icons/apple-touch-icon-144x144.png" />
			<link rel="apple-touch-icon-precomposed" sizes="60x60" href="/assets/icons/apple-touch-icon-60x60.png" />
			<link rel="apple-touch-icon-precomposed" sizes="120x120" href="/assets/icons/apple-touch-icon-120x120.png" />
			<link rel="apple-touch-icon-precomposed" sizes="76x76" href="/assets/icons/apple-touch-icon-76x76.png" />
			<link rel="apple-touch-icon-precomposed" sizes="152x152" href="/assets/icons/apple-touch-icon-152x152.png" />
			<link rel="icon" type="image/png" href="/assets/icons/favicon-196x196.png" sizes="196x196" />
			<link rel="icon" type="image/png" href="/assets/icons/favicon-96x96.png" sizes="96x96" />
			<link rel="icon" type="image/png" href="/assets/icons/favicon-32x32.png" sizes="32x32" />
			<link rel="icon" type="image/png" href="/assets/icons/favicon-16x16.png" sizes="16x16" />
			<link rel="icon" type="image/png" href="/assets/icons/favicon-128x128.png" sizes="128x128" />
			<meta name="msapplication-TileColor" content="#FFFFFF" />
			<meta name="msapplication-TileImage" content="/assets/icons/mstile-144x144.png" />
			<meta name="msapplication-square70x70logo" content="/assets/icons/mstile-70x70.png" />
			<meta name="msapplication-square150x150logo" content="/assets/icons/mstile-150x150.png" />
			<meta name="msapplication-wide310x150logo" content="/assets/icons/mstile-310x150.png" />
			<meta name="msapplication-square310x310logo" content="/assets/icons/mstile-310x310.png" />
		</head>
		<body class="prose font-mono">
			<div class="p-4">
				{ children... }
			</div>

			<footer class="footer">
				<div class="flex flex-row px-1 bg-gray-900 text-xs justify-between">
					<a href="/" class="text-white">GBIF - Latest Observation</a>
					<a href="/about" class="text-white">About</a>
					<a href="https://github.com/HannesOberreiter/gbif-extinct" target="_blank" class="text-white">GitHub gbif-extinct</a>
					<a href="https://www.gbif.org/" target="_blank" class="text-white">Data from GBIF</a>
				</div>
			</footer>

		</body>
	</html>
	<script src={fmt.Sprintf("/assets/js/main.js?=%d", cacheBuster)} />
}